pragma solidity ^0.4.18;

import './zeppelin-solidity/contracts/token/ERC20/StandardToken.sol';

/**
 @dev Interface of recipient contract for approveAndCall pattern.
*/
interface tokenRecipient {
	function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;
}

/**
 * @title CORPREG Token
 * @dev Standard ERC20 token
 */
contract {{.Name}}Token is StandardToken {				
	string public constant NAME = "{{.Name_UC}} Token";
	string public constant SYMBOL = "{{.Name_UC}}";	
	uint8 public constant DECIMALS = {{.Decimals}}; 
	uint256 public constant INITIAL_SUPPLY = {{.InitialSupply}};

	/**
	 * @dev Gives msg.sender all of existing tokens.
	 */
	function CorpRegToken() public {
		totalSupply_ = INITIAL_SUPPLY;
		balances[msg.sender] = INITIAL_SUPPLY;
	}

	// xyzzy - Should add in "owner"?

	/**
	 * @notice Set allowance for other address and notify.
	 * Allows `_spender` to spend no more than `_value` tokens 
	 * on your behalf and then ping the contract about it.
	 * @param _spender The address authorized to spend.
	 * @param _value The max amount they can spend.
	 * @param _extraData Extra information to send to the approved contract.
	*/
	function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
		tokenRecipient spender = tokenRecipient(_spender);
		if (approve(_spender, _value)) {
			spender.receiveApproval(msg.sender, _value, this, _extraData);
			return true;
		}
	}

}
